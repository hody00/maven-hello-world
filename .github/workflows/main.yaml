name: MyApp CI/CD Pipeline

on:
  push:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - 'README.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - 'README.md'
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version to increment (major, minor, patch)'
        required: false
        default: 'patch'
        type: choice
        options: [ 'major', 'minor', 'patch' ]

env:
  PROJECT_DIR: myapp
  VERSION_INCREMENT: ${{ github.event.inputs.version_increment || 'patch' }}
  DEVOPS_USERNAME: "GitHub Actions Bot"
  DEVOPS_EMAIL: "devops@myorg.com"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      checks: read
      packages: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
        cache-dependency-path: "${{ env.PROJECT_DIR }}/pom.xml"

    - name: Setup GH CLI
      uses: sersoft-gmbh/setup-gh-cli-action@v2
      with:
        version: 2.66.1
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Version Control
      id: semver
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        OLD_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -B --fail-fast)
        get_version() {
          mvn build-helper:parse-version help:evaluate -Dexpression="parsedVersion.$1" -q -DforceStdout -B --fail-fast
        }
        case "${{ env.VERSION_INCREMENT }}" in
          major)  major=$(get_version nextMajorVersion); minor=0; patch=0 ;;
          minor)  major=$(get_version majorVersion); minor=$(get_version nextMinorVersion); patch=0 ;;
          *)      major=$(get_version majorVersion); minor=$(get_version minorVersion); patch=$(get_version nextIncrementalVersion);;
        esac
        NEW_VERSION="$major.$minor.$patch"
        # Ensure release are performed from 'master' only. For other branches, append -SNAPSHOT
        if [[ "${{ github.ref_name }}" != "master" ]]; then
          NEW_VERSION="${NEW_VERSION}-SNAPSHOT"
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "::notice title=Version Update::$OLD_VERSION -> $NEW_VERSION"

    - name: Update Project Version
      working-directory: ${{ env.PROJECT_DIR }}
      run: mvn versions:set-property -Dproperty="revision" -DnewVersion=${{ steps.semver.outputs.new_version }} -DgenerateBackupPoms=false -B --fail-fast

    - name: Compile
      working-directory: ${{ env.PROJECT_DIR }}
      run: mvn clean compile -B --fail-fast

    - name: Build and Test
      working-directory: ${{ env.PROJECT_DIR }}
      run: mvn clean test -B --fail-fast

    - name: Package artifacts
      working-directory: ${{ env.PROJECT_DIR }}
      run: mvn package -DskipTests -B --fail-fast

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: myapp-${{ steps.semver.outputs.new_version }}-${{ github.run_number }}
        path: ${{ env.PROJECT_DIR }}/target/myapp-*.jar

    - name: Commit & Push
      id: create_pr
      if: github.event_name != 'pull_request'
      run: |
        # Configure git with the devops username and email
        git config --global user.name "${{ env.DEVOPS_USERNAME }}"
        git config --global user.email ${{ env.DEVOPS_EMAIL }}
        gh auth status
        new_version="${{ steps.semver.outputs.new_version }}"
        BRANCH_NAME="bump-version-$new_version-${{ github.run_number }}"
        git checkout -b $BRANCH_NAME
        git diff
        git add ${{ env.PROJECT_DIR }}/pom.xml
        git commit --allow-empty -m "Bump version to $new_version"
        git status
        git push origin $BRANCH_NAME
        pr_url=$(gh pr create \
          --title "Bump version to $new_version (${{ github.run_number }})" \
          --body "This PR bumps the version to $new_version" \
          --head "$BRANCH_NAME" \
          --base ${{ github.ref_name }})
        echo "pr_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "pr_url=$pr_url" >> $GITHUB_OUTPUT
        echo "::notice title=PR::$pr_url"

    - name: Merge PR
      if: github.event_name != 'pull_request'
      run: |
        echo "Waiting for checks to finish..."
        sleep 15
        PR_NUMBER=$(echo "${{ steps.create_pr.outputs.pr_url }}" | grep -oE '[0-9]+$')
        PR_MERGE_STATE=$(gh pr view "$PR_NUMBER" --json 'mergeStateStatus' --jq '.mergeStateStatus' )
        PR_MERGEABLE=$(gh pr view "$PR_NUMBER" --json 'mergeable' --jq '.mergeable' )
        echo "PR_MERGE_STATE=$PR_MERGE_STATE && PR_MERGEABLE=$PR_MERGEABLE"
        if [[ "$PR_MERGE_STATE" == "CLEAN" && "$PR_MERGEABLE" == "MERGEABLE" ]]; then
          echo "✅ PR is mergeable without conflicts."
          if gh pr merge "$PR_NUMBER" --repo "${{ github.repository }}" --admin --merge --delete-branch; then
            echo "✅ PR #$PR_NUMBER merged successfully!"
            exit 0
          fi
        fi
        echo "❌ PR has merge conflicts or an unknown merge status: $PR_MERGE_STATE"
        exit 1

    - name: Cleanup
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_URL: ${{ steps.create_pr.outputs.pr_url }}
        BRANCH_NAME: ${{ steps.create_pr.outputs.pr_branch }}
      run: |
        echo "Cleaning up GitHub PR and branch..."
        # Check if PR exist and delete it
        if [[ -n "$PR_URL" ]]; then
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          if [[ "$(gh pr view $PR_NUMBER --json 'closed' --jq '.closed')" == "false" ]] ; then 
            gh pr close "$PR_NUMBER" --delete-branch --comment "${{ github.run_number }} - cleanup pr number $PR_NUMBER"
            echo "✅ Deleted PR #$PR_NUMBER."
          fi
        fi
        # Check if branch exists and delete it
        if [[ -n "$BRANCH_NAME" ]]; then
          if gh api repos/${{ github.repository }}/branches/$BRANCH_NAME >/dev/null 2>&1; then
            gh api -X DELETE repos/${{ github.repository }}/git/refs/heads/$BRANCH_NAME || echo "Failed to delete branch."
            echo "✅ Deleted branch $BRANCH_NAME."
          fi
        fi
        echo "Finished cleaning."

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp-${{ needs.build.outputs.new_version }}-${{ github.run_number }}
          path: ${{ env.PROJECT_DIR }}/artifacts/

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          IMAGE_TAG: ${{ needs.build.outputs.new_version }}
        run: |
          FILE_EXIST="false"
          if [ -f "./app.properties" ]; then
            FILE_EXIST="true"
          fi
          IMAGE="${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          docker build --build-arg COPY_APP_PROPERTIES="${FILE_EXIST}" --build-arg IMAGE_TAG="${{ env.IMAGE_TAG }}" -t $IMAGE .
          echo "✅ Successfully built image: $IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Push Docker image
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          IMAGE: ${{ env.IMAGE }}
        run: |
          docker push $IMAGE
          echo "✅ Successfully pushed image: $IMAGE"
          echo "::notice title=Build Image::$IMAGE"
